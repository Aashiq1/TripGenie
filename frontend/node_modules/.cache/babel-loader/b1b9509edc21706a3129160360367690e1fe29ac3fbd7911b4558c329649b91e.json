{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const api = {\n  // Health check\n  ping: async () => {\n    const response = await apiClient.get('/ping');\n    return response.data;\n  },\n  // Submit user input\n  submitUser: async userData => {\n    const response = await apiClient.post('/inputs/user', userData);\n    return response.data;\n  },\n  // Get group data\n  getGroup: async () => {\n    const response = await apiClient.get('/inputs/group');\n    return response.data;\n  },\n  // Plan trip\n  planTrip: async () => {\n    const response = await apiClient.post('/inputs/plan');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","data","message","api","ping","get","submitUser","userData","post","getGroup","planTrip"],"sources":["C:/Users/Aashiq/OneDrive/Desktop/TripGenie/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { UserInput, GroupInput, TripPlan, APIResponse } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor for logging\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const api = {\r\n  // Health check\r\n  ping: async (): Promise<{ message: string }> => {\r\n    const response = await apiClient.get('/ping');\r\n    return response.data;\r\n  },\r\n\r\n  // Submit user input\r\n  submitUser: async (userData: UserInput): Promise<APIResponse<UserInput>> => {\r\n    const response = await apiClient.post('/inputs/user', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get group data\r\n  getGroup: async (): Promise<GroupInput> => {\r\n    const response = await apiClient.get('/inputs/group');\r\n    return response.data;\r\n  },\r\n\r\n  // Plan trip\r\n  planTrip: async (): Promise<TripPlan> => {\r\n    const response = await apiClient.post('/inputs/plan');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,WAAAF,cAAA,GAAUD,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,eAAeL,MAAM,CAACM,GAAG,EAAE,CAAC;EAC9E,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,SAAS,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAChCW,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACTT,OAAO,CAACK,KAAK,CAAC,YAAY,EAAE,EAAAI,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,IAAI,KAAIL,KAAK,CAACM,OAAO,CAAC;EAClE,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMO,GAAG,GAAG;EACjB;EACAC,IAAI,EAAE,MAAAA,CAAA,KAA0C;IAC9C,MAAML,QAAQ,GAAG,MAAMjB,SAAS,CAACuB,GAAG,CAAC,OAAO,CAAC;IAC7C,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,UAAU,EAAE,MAAOC,QAAmB,IAAsC;IAC1E,MAAMR,QAAQ,GAAG,MAAMjB,SAAS,CAAC0B,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;IAC/D,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,QAAQ,EAAE,MAAAA,CAAA,KAAiC;IACzC,MAAMV,QAAQ,GAAG,MAAMjB,SAAS,CAACuB,GAAG,CAAC,eAAe,CAAC;IACrD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAS,QAAQ,EAAE,MAAAA,CAAA,KAA+B;IACvC,MAAMX,QAAQ,GAAG,MAAMjB,SAAS,CAAC0B,IAAI,CAAC,cAAc,CAAC;IACrD,OAAOT,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeE,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}